name: Non-Nix Build Test

on:
  pull_request:
    branches: [ master ]

jobs:
  test-ubuntu:
    runs-on: ubuntu-24.04
    name: Ubuntu 24.04 - Clang
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y clang libc++-dev libc++abi-dev cmake ninja-build
        
    - name: Bootstrap vcpkg
      run: ./setup-vcpkg.sh
        
    - name: Configure CMake
      env:
        CC: clang
        CXX: clang++
        CXXFLAGS: "-stdlib=libc++"
        LDFLAGS: "-stdlib=libc++"
      run: cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake -G Ninja -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libc++"
          
    - name: Build
      run: cmake --build build --parallel
      
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure

  test-macos:
    runs-on: macos-14
    name: macOS 14 - Apple Silicon
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Verify Apple Silicon architecture
      run: |
        echo "System architecture: $(uname -m)"
        echo "Hardware platform: $(uname -p)"
        sysctl -n machdep.cpu.brand_string
        if [ "$(uname -m)" != "arm64" ]; then
          echo "❌ Expected Apple Silicon (arm64) but got $(uname -m)"
          exit 1
        fi
        echo "✅ Running on Apple Silicon (arm64)"
        
    - name: Install dependencies
      run: |
        brew install cmake ninja
        
    - name: Verify compiler
      run: |
        echo "=== System Clang Information ==="
        clang++ --version
        which clang++
        echo "=== C++23 Feature Test ==="
        echo '#include <print>' | clang++ -std=c++23 -E - > /dev/null 2>&1 && echo "✅ C++23 print available" || echo "❌ C++23 print not available"
        echo "=== SDK Information ==="
        xcrun --show-sdk-path
        echo "=== Testing basic C++23 compilation ==="
        echo 'int main() { return 0; }' | clang++ -std=c++23 -x c++ - -o /tmp/test && echo "✅ C++23 compilation works" || echo "❌ C++23 compilation failed"
        
    - name: Bootstrap vcpkg
      run: ./setup-vcpkg.sh
      
    - name: Configure CMake
      run: |
        # First try with system clang
        echo "=== Attempting configuration with system clang ==="
        if cmake -B build -S . \
          -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -G Ninja 2>&1; then
          echo "✅ Configuration successful with system clang"
        else
          echo "❌ Configuration failed with system clang, trying Homebrew LLVM fallback..."
          echo "=== Installing Homebrew LLVM as fallback ==="
          brew install llvm
          
          # Set up environment for Homebrew LLVM
          export CC=/opt/homebrew/opt/llvm/bin/clang
          export CXX=/opt/homebrew/opt/llvm/bin/clang++
          export SDKROOT=$(xcrun --show-sdk-path)
          
          # Clean up failed build directory
          rm -rf build
          
          echo "=== Attempting configuration with Homebrew LLVM and system headers ==="
          cmake -B build -S . \
            -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -G Ninja \
            -DCMAKE_C_COMPILER=/opt/homebrew/opt/llvm/bin/clang \
            -DCMAKE_CXX_COMPILER=/opt/homebrew/opt/llvm/bin/clang++ \
            -DCMAKE_CXX_FLAGS="-isysroot $(xcrun --show-sdk-path)" \
            -DCMAKE_C_FLAGS="-isysroot $(xcrun --show-sdk-path)" || {
              echo "❌ Configuration failed with Homebrew LLVM as well"
              echo "=== Debug Information ==="
              echo "SDK Root: $(xcrun --show-sdk-path)"
              echo "LLVM Clang version:"
              /opt/homebrew/opt/llvm/bin/clang++ --version
              exit 1
            }
          echo "✅ Configuration successful with Homebrew LLVM"
        fi
          
    - name: Build
      run: cmake --build build --parallel
      
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure

  test-windows:
    runs-on: windows-2022
    name: Windows 2022 - MSVC 2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
      
    - name: Bootstrap vcpkg
      run: .\setup-vcpkg.bat
      shell: cmd
      
    - name: Configure CMake
      run: cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release 
          
    - name: Build
      run: cmake --build build --parallel
      
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure -C Release
