name: Non-Nix Build Test
permissions:
  contents: read

on:
  pull_request:
    branches: [ master ]

jobs:
  test-ubuntu:
    runs-on: ubuntu-24.04
    name: Ubuntu 24.04 - Clang
    env:
      CC: clang
      CXX: clang++
      CXXFLAGS: "-stdlib=libc++"
      LDFLAGS: "-stdlib=libc++"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y clang libc++-dev libc++abi-dev cmake ninja-build

    - name: Bootstrap vcpkg
      run: ./setup-vcpkg.sh
        
    - name: Configure CMake
      run: cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake -G Ninja
          
    - name: Build
      run: cmake --build build --parallel
      
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure

  test-macos:
    runs-on: macos-14
    name: macOS 14 - Apple Silicon

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Verify Apple Silicon architecture
      run: |
        echo "System architecture: $(uname -m)"
        echo "Hardware platform: $(uname -p)"
        sysctl -n machdep.cpu.brand_string
        if [ "$(uname -m)" != "arm64" ]; then
          echo "❌ Expected Apple Silicon (arm64) but got $(uname -m)"
          exit 1
        fi
        echo "✅ Running on Apple Silicon (arm64)"
        
    - name: Install dependencies
      run: |
        brew install cmake ninja llvm lld

    - name: Setup LLVM environment
      run: |
        MACOS_SDK=$(xcrun --show-sdk-path)
        echo "SDKROOT=$MACOS_SDK" >> $GITHUB_ENV
        LLVM_PREFIX=$(brew --prefix llvm)
        echo "LLVM_PREFIX=$LLVM_PREFIX" >> $GITHUB_ENV
        echo "CC=$LLVM_PREFIX/bin/clang" >> $GITHUB_ENV
        echo "CXX=$LLVM_PREFIX/bin/clang++" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$LLVM_PREFIX/include" >> $GITHUB_ENV
        echo "LDFLAGS=-L$LLVM_PREFIX/lib -L$LLVM_PREFIX/lib/c++ -L$LLVM_PREFIX/lib/unwind -lunwind" >> $GITHUB_ENV
        # echo "CXXFLAGS=-stdlib=libc++ -isystem $LLVM_PREFIX/include/c++/v1 -isysroot $MACOS_SDK" >> $GITHUB_ENV
        # echo "CXXFLAGS=-isystem $LLVM_PREFIX/include/c++/v1" >> $GITHUB_ENV
        # echo "LDFLAGS=-stdlib=libc++ -L$LLVM_PREFIX/lib/c++ -L$LLVM_PREFIX/lib/unwind -lunwind -Wl,-rpath,$LLVM_PREFIX/lib" >> $GITHUB_ENV
        # echo "LDFLAGS=-L$LLVM_PREFIX/lib/c++ -L$LLVM_PREFIX/lib/unwind -lunwind -Wl,-rpath,$LLVM_PREFIX/lib" >> $GITHUB_ENV

        
    - name: Bootstrap vcpkg
      run: ./setup-vcpkg.sh
      
    - name: Configure CMake
      run: cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake -G Ninja
          
    - name: Build
      run: cmake --build build --parallel
      
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure

  test-windows:
    runs-on: windows-2022
    name: Windows 2022 - MSVC 2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
      
    - name: Bootstrap vcpkg
      run: .\setup-vcpkg.bat
      shell: cmd
      
    - name: Configure CMake
      run: cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake"
          
    - name: Build
      run: cmake --build build --parallel
      
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure
